{"version":3,"sources":["scripts/main.js"],"names":["header","document","querySelector","headers","querySelectorAll","tableBody","sortTableByHeaderClick","ev","columnName","target","textContent","index","findIndex","title","rows","callback","getCallback","sort","forEach","row","append","parseSalary","str","Number","slice","split","join","prev","curr","dataPrev","children","dataCurr","localeCompare","addEventListener"],"mappings":";AAAA,aAgCC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA9BD,IAAMA,EAASC,SAASC,cAAc,SAChCC,EAAcH,EAAAA,EAAOI,iBAAiB,OACtCC,EAAYJ,SAASC,cAAc,SAIzC,SAASI,EAAuBC,GACxBC,IAAAA,EAAaD,EAAGE,OAAOC,YACvBC,EAAQR,EACXS,UAAU,SAAAC,GAASA,OAAAA,EAAMH,cAAgBF,IACtCM,EAAWT,EAAAA,EAAUD,iBAAiB,OAEtCW,EAAWC,EAAYR,EAAYG,GAEzCG,EAAKG,KAAKF,GAAUG,QAAQ,SAAAC,GAAOd,OAAAA,EAAUe,OAAOD,KAGtD,SAASE,EAAYC,GACZC,OAAAA,OAAOD,EAAIE,MAAM,GAAGC,MAAM,KAAKC,KAAK,KAG7C,SAASV,EAAYR,EAAYG,GACxB,OAAA,SAACgB,EAAMC,GACNC,IAAAA,EAAWF,EAAKG,SAASnB,GAAOD,YAChCqB,EAAWH,EAAKE,SAASnB,GAAOD,YAE9BF,MAAe,WAAfA,EACJa,EAAYQ,GAAYR,EAAYU,GACpCF,EAASG,cAAcD,IAxB/B/B,EAAOiC,iBAAiB,QAAS3B","file":"main.9b980da0.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst header = document.querySelector('thead');\nconst headers = [...header.querySelectorAll('th')];\nconst tableBody = document.querySelector('tbody');\n\nheader.addEventListener('click', sortTableByHeaderClick);\n\nfunction sortTableByHeaderClick(ev) {\n  const columnName = ev.target.textContent;\n  const index = headers\n    .findIndex(title => title.textContent === columnName);\n  const rows = [...tableBody.querySelectorAll('tr')];\n\n  const callback = getCallback(columnName, index);\n\n  rows.sort(callback).forEach(row => tableBody.append(row));\n}\n\nfunction parseSalary(str) {\n  return Number(str.slice(1).split(',').join(''));\n}\n\nfunction getCallback(columnName, index) {\n  return (prev, curr) => {\n    const dataPrev = prev.children[index].textContent;\n    const dataCurr = curr.children[index].textContent;\n\n    return (columnName === 'Salary')\n      ? parseSalary(dataPrev) - parseSalary(dataCurr)\n      : dataPrev.localeCompare(dataCurr);\n  };\n}\n"]}